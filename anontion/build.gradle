/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 */

/**
* WebAppInitializer
*/

plugins {
    id 'java-library'
    id 'eclipse'
    id 'war'
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation libs.junit

    api libs.commons.math3

    implementation libs.guava

    implementation 'org.springframework:spring-web:6.2.2'
    implementation 'org.springframework:spring-context:6.2.2'
    implementation 'org.springframework:spring-core:6.2.2'
    implementation 'org.springframework:spring-webmvc:6.2.2'
    implementation 'org.springframework:spring-instrument:6.2.2'

    //

    implementation 'org.springframework.data:spring-data-jpa:3.4.2'

    //

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.3' // OPEN

    //

    compileOnly 'jakarta.servlet:jakarta.servlet-api:6.1.0'

    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0' // 3.0.2
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'
    implementation 'jakarta.el:jakarta.el-api:6.0.1'

    //

    implementation 'org.hibernate.orm:hibernate-core:6.6.11.Final'
    implementation 'org.hibernate.validator:hibernate-validator:8.0.2.Final'
    implementation 'org.hibernate:hibernate-validator-annotation-processor:8.0.2.Final'
    implementation 'org.hibernate.validator:hibernate-validator-cdi:8.0.2.Final'

    implementation 'mysql:mysql-connector-java:8.0.28'

    //implementation 'org.slf4j:slf4j-api:2.0.0'
    //implementation 'org.slf4j:slf4j-simple:2.0.0'

    //implementation 'javax.xml.bind:jaxb-api:2.3.0'
    //implementation 'org.javassist:javassist:3.28.0-GA'

    implementation 'ch.qos.logback:logback-core:1.5.18'
    implementation 'ch.qos.logback:logback-classic:1.5.18'

    testImplementation 'org.springframework:spring-test:6.2.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    
    //implementation 'org.glassfish.expressly:expressly:5.0.0'
    //implementation 'org.glassfish:jakarta.el:4.0.0'

    implementation 'org.bouncycastle:bcprov-jdk15on:1.60'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.60'
    
    //implementation 'org.bouncycastle:bcprov-jdk18on:1.80'    
    //implementation 'org.bouncycastle:bcpkix-jdk18on:1.80'
    
    //
    
    implementation 'org.tuckey:urlrewritefilter:5.1.3'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

sourceSets {
    common {
        java {
            srcDir 'src/main/common/java'
        }
    }
    models {
        java {
            srcDir 'src/main/models/java'
        }
    }
    services {
        java {
            srcDir 'src/main/services/java'
        }
    }
    asterisk {
        java {
            srcDir 'src/main/asterisk/java'
        }
    }
    application {
        java {
            srcDir 'src/main/application/java'
        }
    }
    account {
        java {
            srcDir 'src/main/account/java'
        }        
    }
    system {
        java {
            srcDir 'src/main/system/java'
        }
    }
}

task compileCommon(type: JavaCompile) {
    source sourceSets.common.java
    destinationDirectory = file("$buildDir/classes/common")
    classpath = sourceSets.main.compileClasspath
}

task compileAsterisk(type: JavaCompile) {
    source sourceSets.asterisk.java
    destinationDirectory = file("$buildDir/classes/asterisk")
    classpath = sourceSets.main.compileClasspath
}

task compileModels(type: JavaCompile) {
    dependsOn compileCommon
    source sourceSets.models.java
    destinationDirectory = file("$buildDir/classes/models")
    classpath = sourceSets.main.compileClasspath +
    files("$buildDir/classes/common")
}

task compileServices(type: JavaCompile) {
    dependsOn compileCommon, compileModels
    source sourceSets.services.java
    destinationDirectory = file("$buildDir/classes/services")
    classpath = sourceSets.main.compileClasspath +
    files("$buildDir/classes/models") +
    files("$buildDir/classes/common")
}

task compileApplication(type: JavaCompile) {
    dependsOn compileCommon, compileAsterisk, compileModels, compileServices
    source sourceSets.application.java
    destinationDirectory = file("$buildDir/classes/application")
    classpath = sourceSets.main.compileClasspath +
    files("$buildDir/classes/asterisk") +
    files("$buildDir/classes/services") +
    files("$buildDir/classes/models") +
    files("$buildDir/classes/common")
}

task compileAccount(type: JavaCompile) {
    dependsOn compileApplication
    source sourceSets.account.java
    destinationDirectory = file("$buildDir/classes/account")
    classpath = sourceSets.main.compileClasspath +
    files("$buildDir/classes/asterisk") +
    files("$buildDir/classes/services") +
    files("$buildDir/classes/models") +
    files("$buildDir/classes/common") +
    files("$buildDir/classes/application")
}

task compileSystem(type: JavaCompile) {
    dependsOn compileCommon, compileApplication, compileAsterisk, compileModels, compileServices
    source sourceSets.system.java
    destinationDirectory = file("$buildDir/classes/system")
    classpath = sourceSets.main.compileClasspath +
    files("$buildDir/classes/asterisk") +
    files("$buildDir/classes/common")
}

tasks.withType(War) {
    dependsOn compileCommon, compileModels, compileServices, compileAsterisk, compileApplication, compileAccount, compileSystem
}

task commonJar(type: Jar) {
    dependsOn compileCommon

    from("$buildDir/classes/common") {
        include '**/*.class'
    }

    from("$projectDir/src/main/common/resources") {
        include '**/*'
    }

    archiveBaseName = 'anontion-common'
    archiveVersion = '1.0.0'
}

task modelsJar(type: Jar) {
    dependsOn compileModels

    from("$buildDir/classes/models") {
        include '**/*.class'
    }

    from("$projectDir/src/main/models/resources") {
        include '**/*'
    }

    archiveBaseName = 'anontion-models'
    archiveVersion = '1.0.0'
}

task servicesJar(type: Jar) {
    dependsOn compileServices

    from("$buildDir/classes/services") {
        include '**/*.class'
    }

    from("$projectDir/src/main/services/resources") {
        include '**/*'
    }

    archiveBaseName = 'anontion-services'
    archiveVersion = '1.0.0'
}

task asteriskJar(type: Jar) {
    dependsOn compileAsterisk

    from("$buildDir/classes/asterisk") {
        include '**/*.class'
    }

    from("$projectDir/src/main/asterisk/resources") {
        include '**/*'
    }

    archiveBaseName = 'anontion-asterisk'
    archiveVersion = '1.0.0'
}

task applicationWar(type: War) {
    dependsOn commonJar
    dependsOn modelsJar
    dependsOn servicesJar
    dependsOn asteriskJar

    from("$projectDir/src/main/application/webapp/WEB-INF") {
        include '*.xml'
        into 'WEB-INF'
    }

    from("$projectDir/src/main/common/webapp/WEB-INF") {
        include 'application-context.xml'
        into 'WEB-INF'
    }

    from("$projectDir/src/main/common/webapp/WEB-INF/classes") {
        include 'logback.xml'
        into 'WEB-INF/classes'
    }

    //from("$projectDir/src/main/common/webapp/META-INF") {
    //    include '*.xml'
    //    into 'META-INF'
    //}

    from("$projectDir/src/main/application/resources") {
        include '**/application.properties'
        into 'WEB-INF/classes'
    }

    from(configurations.runtimeClasspath) {
        into 'WEB-INF/lib'
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    from("$buildDir/classes/application") {
        include '**/*.class'
        into 'WEB-INF/classes'
    }

    from("$buildDir/libs") {
        include '**/anontion-common-1.0.0.jar'
        into 'WEB-INF/lib'
    }

    from("$buildDir/libs") {
        include '**/anontion-asterisk-1.0.0.jar'
        into 'WEB-INF/lib'
    }

    from("$buildDir/libs") {
        include '**/anontion-services-1.0.0.jar'
        into 'WEB-INF/lib'
    }

    from("$buildDir/libs") {
        include '**/anontion-models-1.0.0.jar'
        into 'WEB-INF/lib'
    }

    archiveBaseName = 'application'
    archiveVersion = '1.0.0'
}

task accountWar(type: War) {
    dependsOn commonJar
    dependsOn modelsJar
    dependsOn servicesJar
    dependsOn asteriskJar

    from("$projectDir/src/main/account/webapp/WEB-INF") {
        include '*.xml'
        into 'WEB-INF'
    }

    from("$projectDir/src/main/common/webapp/WEB-INF") {
        include 'application-context.xml'
        into 'WEB-INF'
    }

    from("$projectDir/src/main/common/webapp/WEB-INF/classes") {
        include 'logback.xml'
        into 'WEB-INF/classes'
    }

    //from("$projectDir/src/main/common/webapp/META-INF") {
    //    include '*.*'
    //    into 'META-INF'
    //}

    from("$projectDir/src/main/account/resources") {
        include '**/application.properties'
        into 'WEB-INF/classes'
    }

    from(configurations.runtimeClasspath) {
        into 'WEB-INF/lib'
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    from("$buildDir/classes/account") {
        include '**/*.class'
        into 'WEB-INF/classes'
    }

    from("$buildDir/classes/application") {
        include '**/*.class'
        into 'WEB-INF/classes'
    }

    from("$buildDir/libs") {
        include '**/anontion-common-1.0.0.jar'
        into 'WEB-INF/lib'
    }

    from("$buildDir/libs") {
        include '**/anontion-asterisk-1.0.0.jar'
        into 'WEB-INF/lib'
    }

    from("$buildDir/libs") {
        include '**/anontion-services-1.0.0.jar'
        into 'WEB-INF/lib'
    }

    from("$buildDir/libs") {
        include '**/anontion-models-1.0.0.jar'
        into 'WEB-INF/lib'
    }

    archiveBaseName = 'account'
    archiveVersion = '1.0.0'
}

task systemWar(type: War) {
    dependsOn commonJar
    dependsOn modelsJar
    dependsOn servicesJar
    dependsOn asteriskJar

    from("$projectDir/src/main/system/webapp/WEB-INF") {
        include '*.xml'
        into 'WEB-INF'
    }

    from("$projectDir/src/main/common/webapp/WEB-INF") {
        include 'application-context.xml'
        into 'WEB-INF'
    }

    from("$projectDir/src/main/common/webapp/WEB-INF/classes") {
        include 'logback.xml'
        into 'WEB-INF/classes'
    }

    //from("$projectDir/src/main/common/webapp/META-INF") {
    //    include '*.xml'
    //    into 'META-INF'
    //}

    from("$projectDir/src/main/system/resources") {
        include '**/application.properties'
        into 'WEB-INF/classes'
    }

    from(configurations.runtimeClasspath) {
        into 'WEB-INF/lib'
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    from("$buildDir/classes/system") {
        include '**/*.class'
        into 'WEB-INF/classes'
    }

    from("$buildDir/libs") {
        include '**/anontion-common-1.0.0.jar'
        into 'WEB-INF/lib'
    }

    from("$buildDir/libs") {
        include '**/anontion-asterisk-1.0.0.jar'
        into 'WEB-INF/lib'
    }

    from("$buildDir/libs") {
        include '**/anontion-services-1.0.0.jar'
        into 'WEB-INF/lib'
    }

    from("$buildDir/libs") {
        include '**/anontion-models-1.0.0.jar'
        into 'WEB-INF/lib'
    }

    archiveBaseName = 'system'
    archiveVersion = '1.0.0'
}

build.dependsOn commonJar, asteriskJar, servicesJar, modelsJar, applicationWar, accountWar, systemWar

tasks.named('war') {
    enabled = false
}
